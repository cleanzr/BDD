% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extract.R
\name{extract,BDDFit-method}
\alias{extract,BDDFit-method}
\alias{extract}
\title{Extract Samples}
\usage{
\S4method{extract}{BDDFit}(x, params = NULL, include = TRUE)
}
\arguments{
\item{x}{an \code{\linkS4class{BDDFit}} object}

\item{params}{an optional character vector specifying the names of
parameters/summary statistics to extract. If not specified, all
parameters and summary statistics are extracted.}

\item{include}{a logical scalar indicating whether the parameters in
\code{params} should be included (TRUE) or excluded (FALSE).}
}
\value{
If params is of length 1, the samples for the requested parameter are
returned as a \code{\link[coda:mcmc]{coda::mcmc}} object.

If params is NULL or of length greater than 1, the parameters are returned
in a named list. The samples for each parameter are represented as a
\code{\link[coda:mcmc]{coda::mcmc}} object.
}
\description{
Extract samples from a fitted model
}
\examples{
## Initialize a BDD model for RLdata500
library(comparator) # provides scoring functions

# Add record ids to the dataframe
RLdata500$ID <- seq.int(nrow(RLdata500))

# Specify model parameters
scoring_fns <- list(
  fname_c1 = Levenshtein(normalize=TRUE),
  lname_c1 = Levenshtein(normalize=TRUE),
  by = BinaryComp(),
  bm = BinaryComp(),
  bd = BinaryComp()
)
scoring_breaks <- list(
  fname_c1 = c(-Inf, .05, .2, .4, Inf),
  lname_c1 = c(-Inf, .05, .2, .4, Inf),
  by = c(-Inf, 0, Inf),
  bm = c(-Inf, 0, Inf),
  bd = c(-Inf, 0, Inf)
)
lambda <- list(
  fname_c1 = c(0.8, 0.85, 0.99),
  lname_c1 = c(0.8, 0.85, 0.99),
  by = c(0.8, 0.99),
  bm = c(0.8, 0.99),
  bd = c(0.8, 0.99)
)

# Prepare pairwise comparison data
pairs <- pairs_all(RLdata500$ID)
pairs <- compute_scores(pairs, RLdata500, scoring_fns, id_col='ID')
pairs <- discretize_scores(pairs, scoring_breaks)
pairs$candidate <- (pairs$fname_c1 < 4) & (pairs$lname_c1 < 4)

model <- BDD(pairs, lambda, candidate_col = 'candidate')

## Run inference
fit <- run_inference(model, n_samples=100, burnin_interval=100)

## Extract samples of the m probabilities
m <- extract(fit, "m")

}
