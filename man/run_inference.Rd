% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_inference.R
\name{run_inference}
\alias{run_inference}
\alias{run_inference,BDDModel-method}
\alias{run_inference,BDDFit-method}
\title{Run Inference for a Model}
\usage{
run_inference(x, n_samples, thin_interval = 1, burnin_interval = 0, ...)

\S4method{run_inference}{BDDModel}(x, n_samples, thin_interval = 1, burnin_interval = 0, ...)

\S4method{run_inference}{BDDFit}(x, n_samples, thin_interval = 1, burnin_interval = 0, ...)
}
\arguments{
\item{x}{an \R object representing a model or a model with sampling
history. Currently, there are methods defined for \code{\linkS4class{BDDModel}}
objects and \code{\linkS4class{BDDFit}} objects. Passing a model begins
sampling from scratch, in which case a burn-in period is recommended.
Passing a model with sampling history will resume inference, adding
samples to the existing history.}

\item{n_samples}{a positive integer. The number of samples to generate
after applying burn-in and thinning.}

\item{thin_interval}{a positive integer. The period for saving samples
(intermediate samples are discarded). The default value is 1, which
means no thinning is applied.}

\item{burnin_interval}{a non-negative integer. The number of initial samples
to discard as burn-in. The default value is 0, which means no burn-in is
applied.}

\item{...}{further arguments passed to or from other methods.}
}
\value{
Returns a \code{\linkS4class{BDDFit}} object with the following slots:
\item{history}{a list containing the sampling history for
parameters/summary statistics along the Markov chain.}
\item{state}{a model object of the same class as the input, which
represents the state of all parameters in the last step of the Markov
chain.}
}
\description{
Runs approximate inference for a model using Markov chain Monte
Carlo (MCMC).
}
\section{Functions}{
\itemize{
\item \code{run_inference,BDDModel-method}: Specialization for \code{\linkS4class{BDDModel}}

\item \code{run_inference,BDDFit-method}: Specialization for \code{\linkS4class{BDDFit}}
}}

\examples{
## Initialize a BDD model for RLdata500
library(comparator) # provides scoring functions

# Add record ids to the dataframe
RLdata500$ID <- seq.int(nrow(RLdata500))

# Specify model parameters
scoring_fns <- list(
  fname_c1 = Levenshtein(normalize=TRUE),
  lname_c1 = Levenshtein(normalize=TRUE),
  by = BinaryComp(),
  bm = BinaryComp(),
  bd = BinaryComp()
)
scoring_breaks <- list(
  fname_c1 = c(-Inf, .05, .2, .4, Inf),
  lname_c1 = c(-Inf, .05, .2, .4, Inf),
  by = c(-Inf, 0, Inf),
  bm = c(-Inf, 0, Inf),
  bd = c(-Inf, 0, Inf)
)
lambda <- list(
  fname_c1 = c(0.8, 0.85, 0.99),
  lname_c1 = c(0.8, 0.85, 0.99),
  by = c(0.8, 0.99),
  bm = c(0.8, 0.99),
  bd = c(0.8, 0.99)
)

# Prepare pairwise comparison data
pairs <- pairs_all(RLdata500$ID)
pairs <- compute_scores(pairs, RLdata500, scoring_fns, id_col='ID')
pairs <- discretize_scores(pairs, scoring_breaks)
pairs$candidate <- (pairs$fname_c1 < 4) & (pairs$lname_c1 < 4)

model <- BDD(pairs, lambda, candidate_col = 'candidate')

## Run inference
fit <- run_inference(model, n_samples=100, burnin_interval=100)

}
